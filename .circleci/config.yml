version: 2.1
jobs:
  build:

    # directory where steps will run
    working_directory: ~/circleci-hockeyhero 

    # run the steps with Docker
    docker: 
      # primary container; this is where all `steps` will run
      - image: circleci/openjdk:8-jdk-stretch 

     # secondary container
      - image: circleci/mysql:latest
    enviroment:
        TEST_DATABASE_URL: mysql://root@localhost/circle_test

    # a collection of executable commands
    steps: 

      # check out source code to working directory    
      - checkout 

      # restore the saved cache after the first run or if `pom.xml` has changed
      - restore_cache: 
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: circleci-hockeyhero-{{ checksum "pom.xml" }}
      
      # gets the project dependencies
      - run: mvn dependency:go-offline 
      
      # saves the project dependencies
      - save_cache: 
          paths:
            - ~/.m2
          key: circleci-hockeyhero-{{ checksum "pom.xml" }}
      
      # build the jar
      - run: mvn package 

      # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.       
      - store_test_results: 
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: target/surefire-reports
      
      # store the uberjar as an artifact
      - store_artifacts: 
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: target/demo-java-spring-0.0.1-SNAPSHOT.jar
         # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples 

#  test:
#    docker:
#      # the primary container, where your job's commands are run
#      - image: maven/openjdk:8-jdk
#      
#      # secondary container
#      - image: circleci/mysql:latest
#    enviroment:
#        TEST_DATABASE_URL: mysql://root@localhost/circle_test
#  
#workflows:
#  build_and_test:
#    jobs:
#      - build
#      - test
#          requires:
#            - build
