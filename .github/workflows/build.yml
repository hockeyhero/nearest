name: nearest-build
# build nearest

# run this workflow on demand, when there is a push to the repo, or on a pull request. 
on:
  workflow_dispatch:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      MYPASSWORD: ${{ secrets.MYPASSWORD }}
      MYSQL_ALLOW_EMPTY_PASSWORD: yes
      MYSQL_ROOT_PASSWORD: 'hockeyhero'
      MYSQL_DATABASE: hockeyhero_nearest
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ''
      SPRING_JPA_HIBERNATE_DDL-AUTO: none   
      SPRING_DATASOURCE_URL: jdbc:mysql://root@localhost/hockeyhero_nearest?useUnicode=true&characterEncoding=utf8    
      
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: 'microsoft'
        java-version: '17.0.3'

    - name: Decrpyt Secrets
      run: openssl enc -d -aes-256-ecb -md md5 -in src/main/resources/config/application.properties.secrets -out src/main/resources/config/application.properties -k $MYPASSWORD

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.4
      with:
        maven-version: 3.8.2  
        
    - name: Setup up MySQL 
      uses: mirromutth/mysql-action@v1.1
      with:
        host port: 3306 
        container port: 3306 
        character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
        mysql version: '5.7' # Optional, default value is "latest". The version of the MySQL
        mysql database: 'hockeyhero_nearest'
        mysql user: 'root'
        mysql password: 'hockeyhero'
        
    - name: Build the Jar
      run: mvn clean package        



    
    

#         
      
#      # login to docker hub
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}      

  



      # create the database
      # Our primary container isn't MYSQL so run a sleep command until it's ready.
#      - name: Waiting for MySQL to be ready
#        command: |
#            for i in `seq 1 10`;
#            do
#              nc -z 127.0.0.1 3306 && echo Success && exit 0
#              echo -n .
#              sleep 1
#            done
#            echo Failed waiting for MySQL && exit 1

      # Install MyAql CLI, Import dummy data. 
#      - name: Install MySQL CLI; Import dummy data; run an example query
#        command: |
#            sudo apt-get update
#            sudo apt-get install mysql-client
#            mysql -h 127.0.0.1 -u root --execute="create database hockeyhero_nearest"
#            mysql -h 127.0.0.1 -u root hockeyhero_nearest < src/test/resources/createtables.sql
#            mysql -h 127.0.0.1 -u root hockeyhero_nearest < src/test/resources/insertdata.sql
#            mysql -h 127.0.0.1 -u root hockeyhero_nearest < src/test/resources/testprocedures.sql
 

#      
      # build and push docker image to docker hub
#      - name: Build and push the docker image to docker hub
#        run: mvn clean compile jib:build -Dimage=davidewan/hockeyhero_nearest     

      # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.       
      #- store_test_results: 
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
      #    path: target/surefire-reports
      
      # store the uberjar as an artifact
      #- store_artifacts: 
      #    # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
      #    path: target/hockeyhero_nearest-0.0.1-SNAPSHOT.jar
      #  # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples 

      # store raw contents of src code
      #- store_artifacts:
      #    path: target/classes
      #    destination: hockeyhero_nearest



